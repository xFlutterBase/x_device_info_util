// Mocks generated by Mockito 5.4.4 from annotations
// in x_device_info_util/test/device_info_util_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:x_device_info_util/internal/check_platform.dart' as _i3;
import 'package:x_device_info_util/internal/check_web.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ICheckWeb].
///
/// See the documentation for Mockito's code generation for more information.
class MockICheckWeb extends _i1.Mock implements _i2.ICheckWeb {
  MockICheckWeb() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isWeb() => (super.noSuchMethod(
        Invocation.method(
          #isWeb,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ICheckPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockICheckPlatform extends _i1.Mock implements _i3.ICheckPlatform {
  MockICheckPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isAndroid() => (super.noSuchMethod(
        Invocation.method(
          #isAndroid,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isIos() => (super.noSuchMethod(
        Invocation.method(
          #isIos,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isWindows() => (super.noSuchMethod(
        Invocation.method(
          #isWindows,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isMacOS() => (super.noSuchMethod(
        Invocation.method(
          #isMacOS,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isLinux() => (super.noSuchMethod(
        Invocation.method(
          #isLinux,
          [],
        ),
        returnValue: false,
      ) as bool);
}
